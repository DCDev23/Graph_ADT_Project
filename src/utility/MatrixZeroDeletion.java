package utility;
/**
 * Class which corrects format of an adjacency matrix generated by the 
 * convertToAdjacencyMatrix method by removing rows and columns that only contain zeros
 * 
 * @author DA Chan
 * @version miniproject
 * 
 */
public class MatrixZeroDeletion {

	 /**
     * Method which removes adjacency matrix rows and columns that only contain zeros
     */
    public static String deleteZeroRowsAndColumns(String matrixString) {
    	// Split the matrixString into rows
        String[] rows = matrixString.split("\n");
        int numRows = rows.length;
        int numCols = rows[0].length();

        // Convert the matrixString to a 2D array
        int[][] matrix = new int[numRows][numCols];
        for (int i = 0; i < numRows; i++) {
            String row = rows[i];
            for (int j = 0; j < numCols; j++) {
                matrix[i][j] = Character.getNumericValue(row.charAt(j));
            }
        }

        // Create arrays to keep track of zero rows and columns
        boolean[] zeroRows = new boolean[numRows];
        boolean[] zeroCols = new boolean[numCols];

        // Identify zero rows and columns
        for (int i = 0; i < numRows; i++) {
            boolean isZeroRow = true;
            for (int j = 0; j < numCols; j++) {
                if (matrix[i][j] != 0) {
                    isZeroRow = false;
                    break;
                }
            }
            zeroRows[i] = isZeroRow;
        }

        for (int j = 0; j < numCols; j++) {
            boolean isZeroCol = true;
            for (int i = 0; i < numRows; i++) {
                if (matrix[i][j] != 0) {
                    isZeroCol = false;
                    break;
                }
            }
            zeroCols[j] = isZeroCol;
        }

        // Create a new matrix without zero rows and columns
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            if (!zeroRows[i]) {
                sb.append("{");
                boolean isFirstElement = true;
                for (int j = 0; j < numCols; j++) {
                    if (!zeroCols[j]) {
                        if (!isFirstElement) {
                            sb.append(",");
                        }
                        sb.append(matrix[i][j]);
                        isFirstElement = false;
                    }
                }
                sb.append("},");
            }
        }

        // Remove trailing comma and square bracket, if any
        if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ',') {
            sb.setLength(sb.length() - 1);
        }

        return sb.toString();
    }
}
